HELP_STRING = """
calculate_codon_density.py

Plots the relative ribosome density at each codon

This requires a bunch of files. 
Two are generated by get_gene_sequence_densities.py:
-f List of all the gene's sequences in fasta format.
-r List of Asite ribosome density across each gene


And finally:
-c information about the genetic code in this format:
codon,AA short abreviation,AA long abreviation,tRNA that reads codon
TTT,F,Phe,tF(GAA)Q
TTC,F,Phe,tF(GAA)Q
TTA,L,Leu,tL(UAA)Q
TTG,L,Leu,tL(UAA)Q
CTT,T,Thr,tT(UAG)Q2
...


Author: Stirling Churchman
Date: February 18, 2014


     -h     print this help message
     -f     gene sequences (required)
     -o     output file name (required)
     -c     genetic code data (not required)
 
Need to first run get_gene_sequence_densities_MTC_hMitoRP.py, which will give the "riboFile" (AsiteFP.txt)   
     
example: python /Users/Mary/Desktop/Data/hMitoRP/PanAnalysis/ScriptsForReanalysis/calculate_codon_density_MTC_hMitoRP.py -f MitoGenes_seq.txt -s sizeRange -l libName -c /Users/Mary/Desktop/Data/hMitoRP/SequenceFiles/hMitoGeneticCode.txt
"""
import sys
from getopt import getopt
import math
import numpy as np
# import matplotlib.pyplot as plt
import itertools
# from matplotlib.pyplot import figure, show
from scipy.stats import gaussian_kde
from numpy.random import normal
from numpy import arange
# from matplotlib.transforms import offset_copy



def main(argv=None):
    if argv is None:
        argv = sys.argv

    inputFile = ""
    sizeRange = ""
    libName = ""
    riboFile = ""
    gcode = ""
    try:
        optlist, args = getopt(argv[1:], "hf:s:l:c:")
    except:
        print("")
        print(HELP_STRING)
        sys.exit(1)
       
    if len(optlist) == 0:
        print("")
        print(HELP_STRING)
        sys.exit(1)
       
    for (opt, opt_arg) in optlist:
        #print opt
        #print opt_arg
        if opt == '-h':
            print("")
            print(HELP_STRING)
            sys.exit(1)
        elif opt == '-f':
            inputFile = opt_arg
        elif opt == '-s':
            sizeRange = opt_arg
        elif opt == '-l':
            libName = opt_arg
            outputFile = opt_arg + '_' + sizeRange + '_CodonDensities.txt'
            outputFile2 = opt_arg + '_' + sizeRange + '_indCodonDensities.txt'
        elif opt == '-c':
            gcode = opt_arg

    if inputFile == "" or outputFile == "":
        print(HELP_STRING)
        sys.exit(1)
    
    riboFile = libName + '_' + sizeRange + '_AsiteFP.txt'
    
    gene_seq = {}
    gene_profile = {}
    # read in gene sequences file, store in gene_seq dictionary
    for line in open(inputFile):
        line = line.replace('\n','')
        if line[0] == '>':
            g = line[1:]
        else:
            gene_seq[g]= line
    # read in ribosome footprint data, store in gene_profile dictionary
    for line in open(riboFile):
        line = line.replace('\n','')
        if line[0] == '>':
            g = line[1:]
            gene_profile[g] = []
        else:
            line = line.split(',')
            for v in line:
                if v != '':
                    gene_profile[g].append(float(v))

    
    # read in the genetic code and store in tRNA-codon dictionary
#    tRNA_codon = {}
#    for line in open(gcode):
# 		line = line.replace('\r\n','').split(',')
#		tRNA_codon[line[0]] = line[3]
#    # Add termination codon
#    tRNA_codon['TAA'] = 'Ter1'
#    tRNA_codon['TAG'] = 'Ter2'
    
    # determine total density across each codon and store as a list in codon_density
    codon_density = {}
    for g in gene_profile:
        
        seq = gene_seq[g]
        prof = gene_profile[g]
        num_codons = int(len(seq)/3)
        ave_prof_density = float(sum(prof))/len(prof)
        for i in range(num_codons):
            trinuc = seq[i*3:i*3+3]
            codon = trinuc

            if ave_prof_density > 0:
                density = sum(prof[i*3:i*3+3])/(ave_prof_density*3)
            if ave_prof_density == 0:
                print(g)
                break
            if codon in codon_density: #First gets added at the next step
                codon_density[codon]+= [density]
            else:
                codon_density[codon] = [density]


    ave_codon_density = []
#    fig = plt.figure(1)
#    ax = fig.add_subplot(111)
    names = []
    density_std = []
    
    outFile = open(outputFile, 'w')
    outFile2 = open(outputFile2, 'w')
    for codon in codon_density:
        i +=1
        densities = codon_density[codon]
#         for i in len(densities):
        outFile2.write('%s,%s\n' % (codon, densities))
        # here we make sure that we have information for each codon and that it appears a minumum number 
        # of times in the genome. 
        if len(densities)>0:
#	        tRNA = tRNA_codon[codon]
            ave_codon_density.append(float(sum(densities))/len(densities))
            names.append(codon)
            std = np.std(densities) #numpy standard deviation
            density_std.append(std)
            pos = names.index(codon)
            outFile.write('%s\t%s\t%s\t%s\n' % (names[pos], ave_codon_density[pos], density_std[pos], len(densities)))
        else:
            print(codon)
        


#    print ave_codon_density
#    print names
#    print density_std
#    print len(ave_codon_density)
#    print len(names)
#    print len(density_std)




#    ax.errorbar(ave_codon_density, tRNA_abun, xerr = density_std, marker = '.',ls = 'None')
#    ax.set_xlabel('average ribosome density at codon')
#    ax.set_ylabel('tRNA abundance')
#    # extract the title from the file name.
#    dataset = tRNAFile.split('/')
#    dataset = dataset[2][0:4]
#    ax.set_title(dataset)
#    ax.grid(True) 
#    # puts the codon name at the data point
#    for i,n in enumerate(names):
#		test =1	
#		ax.text(ave_codon_density[i], tRNA_abun[i], n)
#        
#    # if you want to zoom into the graph, set x and y bounds:
##    ax.set_xbound(-2,4)	
#    show()	
#    fig.savefig(outputFile)    	    
#    

                 

##############################################
if __name__ == "__main__":
    sys.exit(main())
